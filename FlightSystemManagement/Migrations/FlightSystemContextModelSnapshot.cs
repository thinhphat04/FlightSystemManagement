// <auto-generated />
using System;
using FlightSystemManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightSystemManagement.Migrations
{
    [DbContext(typeof(FlightSystemContext))]
    partial class FlightSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightSystemManagement.Entity.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorID")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Flight", b =>
                {
                    b.Property<int>("FlightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightID"));

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsFlightCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("PointOfLoading")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PointOfUnloading")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalDocuments")
                        .HasColumnType("int");

                    b.HasKey("FlightID");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.FlightDocument", b =>
                {
                    b.Property<int>("FlightDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightDocumentID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("FlightID")
                        .HasColumnType("int");

                    b.HasKey("FlightDocumentID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("FlightID");

                    b.ToTable("FlightDocuments");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<bool>("CanDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<bool>("NoPermission")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionGroupID")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("PermissionGroupID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.PermissionGroup", b =>
                {
                    b.Property<int>("PermissionGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionGroupID"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionGroupID");

                    b.ToTable("PermissionGroups");

                    b.HasData(
                        new
                        {
                            PermissionGroupID = 1,
                            GroupName = "Admin"
                        },
                        new
                        {
                            PermissionGroupID = 2,
                            GroupName = "Back-Office"
                        },
                        new
                        {
                            PermissionGroupID = 3,
                            GroupName = "Pilot"
                        },
                        new
                        {
                            PermissionGroupID = 4,
                            GroupName = "Crew"
                        });
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 16, 5, 55, 434, DateTimeKind.Local).AddTicks(6370),
                            Email = "admin@vietjetair.com",
                            FullName = "Admin User",
                            PasswordHash = "$2a$11$jZErUBa25UAPYFvidLqZA..ThCGdTzj2.KDF.ieKiWz.J1sUOWgo6",
                            RefreshToken = "4d635d15-be34-4f24-9bce-3c1e7d14fef9",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 30, 16, 5, 55, 578, DateTimeKind.Local).AddTicks(9280),
                            Role = "Admin",
                            Status = "Active"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedAt = new DateTime(2024, 10, 23, 16, 5, 55, 578, DateTimeKind.Local).AddTicks(9340),
                            Email = "backoffice@vietjetair.com",
                            FullName = "BackOffice User",
                            PasswordHash = "$2a$11$fYaGRrxBk8AvlpRawXH0DuYDp.GwjZy56W0Cyk.5AeJKxoDLUegYe",
                            RefreshToken = "22e58087-2e0b-4fba-bce6-0b0a2af587d0",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 30, 16, 5, 55, 723, DateTimeKind.Local).AddTicks(7880),
                            Role = "Back-Office",
                            Status = "Active"
                        },
                        new
                        {
                            UserID = 3,
                            CreatedAt = new DateTime(2024, 10, 23, 16, 5, 55, 723, DateTimeKind.Local).AddTicks(7940),
                            Email = "pilot@vietjetair.com",
                            FullName = "Pilot User",
                            PasswordHash = "$2a$11$hNqD5zO.QQSWG61hsZEfUOvYLMz31hB0Zqz/CkWCePHd0diUY/zBi",
                            RefreshToken = "c73ca1f1-e4ad-4686-9873-36a70d03c13e",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 30, 16, 5, 55, 870, DateTimeKind.Local).AddTicks(7890),
                            Role = "Pilot",
                            Status = "Active"
                        },
                        new
                        {
                            UserID = 4,
                            CreatedAt = new DateTime(2024, 10, 23, 16, 5, 55, 870, DateTimeKind.Local).AddTicks(7950),
                            Email = "crew@vietjetair.com",
                            FullName = "Crew User",
                            PasswordHash = "$2a$11$a8bCp1N83FqDKnbZoNrOb.KSNWZV.NNv7E5hvhQQEHVHQl6LhgVRm",
                            RefreshToken = "a4374eef-5a4e-47c8-bb0e-f1b02b3ed851",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 30, 16, 5, 56, 13, DateTimeKind.Local).AddTicks(7320),
                            Role = "Crew",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.FlightDocument", b =>
                {
                    b.HasOne("FlightSystemManagement.Entity.Document", "Document")
                        .WithMany("FlightDocuments")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystemManagement.Entity.Flight", "Flight")
                        .WithMany("FlightDocuments")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Permission", b =>
                {
                    b.HasOne("FlightSystemManagement.Entity.Document", "Document")
                        .WithMany("Permissions")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystemManagement.Entity.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Document", b =>
                {
                    b.Navigation("FlightDocuments");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Flight", b =>
                {
                    b.Navigation("FlightDocuments");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
