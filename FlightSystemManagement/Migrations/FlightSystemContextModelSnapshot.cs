// <auto-generated />
using System;
using FlightSystemManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightSystemManagement.Migrations
{
    [DbContext(typeof(FlightSystemContext))]
    partial class FlightSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightSystemManagement.Entity.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorID")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Flight", b =>
                {
                    b.Property<int>("FlightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightID"));

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsFlightCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("PointOfLoading")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PointOfUnloading")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalDocuments")
                        .HasColumnType("int");

                    b.HasKey("FlightID");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.FlightDocument", b =>
                {
                    b.Property<int>("FlightDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightDocumentID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("FlightID")
                        .HasColumnType("int");

                    b.HasKey("FlightDocumentID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("FlightID");

                    b.ToTable("FlightDocuments");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<bool>("CanDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionGroupID")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("PermissionGroupID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.PermissionGroup", b =>
                {
                    b.Property<int>("PermissionGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionGroupID"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionGroupID");

                    b.ToTable("PermissionGroups");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2024, 10, 22, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5650),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            PasswordHash = "123456",
                            RefreshToken = "c8a5ad80-8c8b-44ee-93d9-68d74abcfa4c",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 29, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5680),
                            Role = "Admin",
                            Status = "Active"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedAt = new DateTime(2024, 10, 22, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5690),
                            Email = "backoffice@example.com",
                            FullName = "BackOffice User",
                            PasswordHash = "123456",
                            RefreshToken = "64c15ad3-85d8-4203-b46f-fb93a4551bb0",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 29, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5700),
                            Role = "Back-Office",
                            Status = "Active"
                        },
                        new
                        {
                            UserID = 3,
                            CreatedAt = new DateTime(2024, 10, 22, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5700),
                            Email = "pilot@example.com",
                            FullName = "Pilot User",
                            PasswordHash = "123456",
                            RefreshToken = "1d3c9acf-0622-4c47-82eb-da7af5d2ba6b",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 29, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5710),
                            Role = "Pilot",
                            Status = "Active"
                        },
                        new
                        {
                            UserID = 4,
                            CreatedAt = new DateTime(2024, 10, 22, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5710),
                            Email = "crew@example.com",
                            FullName = "Crew User",
                            PasswordHash = "123456",
                            RefreshToken = "2cc9ebfb-ee1f-4f87-8423-961ff1655e0c",
                            RefreshTokenExpiryTime = new DateTime(2024, 10, 29, 14, 38, 4, 116, DateTimeKind.Local).AddTicks(5710),
                            Role = "Crew",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.FlightDocument", b =>
                {
                    b.HasOne("FlightSystemManagement.Entity.Document", "Document")
                        .WithMany("FlightDocuments")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystemManagement.Entity.Flight", "Flight")
                        .WithMany("FlightDocuments")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Permission", b =>
                {
                    b.HasOne("FlightSystemManagement.Entity.Document", "Document")
                        .WithMany("Permissions")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystemManagement.Entity.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Document", b =>
                {
                    b.Navigation("FlightDocuments");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.Flight", b =>
                {
                    b.Navigation("FlightDocuments");
                });

            modelBuilder.Entity("FlightSystemManagement.Entity.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
